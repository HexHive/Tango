diff --git a/src/src/daemon.c b/src/src/daemon.c
index 2935d0a..0dc0f08 100644
--- a/src/src/daemon.c
+++ b/src/src/daemon.c
@@ -451,7 +451,7 @@ if (pid == 0)
 
   DEBUG(D_any)
     debug_printf("Process %d is handling incoming connection from %s\n",
-      (int)getpid(), sender_fullhost);
+      42, sender_fullhost);
 
   /* Now disable debugging permanently if it's required only for the daemon
   process. */
@@ -495,7 +495,7 @@ if (pid == 0)
     reset_point = store_get(0);   /* Save current store high water point */
 
     DEBUG(D_any)
-      debug_printf("Process %d is ready for new message\n", (int)getpid());
+      debug_printf("Process %d is ready for new message\n", 42);
 
     /* Smtp_setup_msg() returns 0 on QUIT or if the call is from an
     unacceptable host or if an ACL "drop" command was triggered, -1 on
@@ -1618,7 +1618,7 @@ if (inetd_wait_mode)
 
   log_write(0, LOG_MAIN,
     "exim %s daemon started: pid=%d, launched with listening socket, %s",
-    version_string, getpid(), big_buffer);
+    version_string, 42, big_buffer);
   set_process_info("daemon(%s): pre-listening socket", version_string);
 
   /* set up the timeout logic */
@@ -1702,7 +1702,7 @@ else if (daemon_listen)
 
   log_write(0, LOG_MAIN,
     "exim %s daemon started: pid=%d, %s, listening for %s",
-    version_string, getpid(), qinfo, big_buffer);
+    version_string, 42, qinfo, big_buffer);
   set_process_info("daemon(%s): %s, listening for %s",
     version_string, qinfo, big_buffer);
   }
@@ -1714,7 +1714,7 @@ else
     : string_sprintf("-q%s", readconf_printtime(queue_interval));
   log_write(0, LOG_MAIN,
     "exim %s daemon started: pid=%d, %s, not listening for SMTP",
-    version_string, getpid(), s);
+    version_string, 42, s);
   set_process_info("daemon(%s): %s, not listening", version_string, s);
   }
 
@@ -1814,7 +1814,7 @@ for (;;)
           int sk;
 
           DEBUG(D_any) debug_printf("Starting queue-runner: pid %d\n",
-            (int)getpid());
+            42);
 
           /* Disable debugging if it's required only for the daemon process. We
           leave the above message, because it ties up with the "child ended"
@@ -2097,7 +2097,7 @@ for (;;)
     {
     int sk;
     log_write(0, LOG_MAIN, "pid %d: SIGHUP received: re-exec daemon",
-      getpid());
+      42);
     for (sk = 0; sk < listen_socket_count; sk++)
       (void)close(listen_sockets[sk]);
     alarm(0);
@@ -2106,7 +2106,7 @@ for (;;)
     exim_nullstd();
     execv(CS exim_path, (char *const *)sighup_argv);
     log_write(0, LOG_MAIN|LOG_PANIC_DIE, "pid %d: exec of %s failed: %s",
-      getpid(), exim_path, strerror(errno));
+      42, exim_path, strerror(errno));
     log_close_all();
     }
 
diff --git a/src/src/deliver.c b/src/src/deliver.c
index 0a1ea19..a27e0a4 100644
--- a/src/src/deliver.c
+++ b/src/src/deliver.c
@@ -2174,7 +2174,7 @@ if (  !shadowing
 
   addr->return_filename =
     spool_fname(US"msglog", message_subdir, message_id,
-      string_sprintf("-%d-%d", getpid(), return_count++));
+      string_sprintf("-%d-%d", 42, return_count++));
   
   if ((addr->return_file = open_msglog_file(addr->return_filename, 0400, &error)) < 0)
     {
@@ -7164,7 +7164,7 @@ if (addr_senddsn)
   if (pid < 0)  /* Creation of child failed */
     {
     log_write(0, LOG_MAIN|LOG_PANIC_DIE, "Process %d (parent %d) failed to "
-      "create child process to send failure message: %s", getpid(),
+      "create child process to send failure message: %s", 42,
       getppid(), strerror(errno));
 
     DEBUG(D_deliver) debug_printf("DSN: child_open_exim failed\n");
@@ -7359,7 +7359,7 @@ while (addr_failed)
 
     if ((pid = child_open_exim(&fd)) < 0)
       log_write(0, LOG_MAIN|LOG_PANIC_DIE, "Process %d (parent %d) failed to "
-        "create child process to send failure message: %s", getpid(),
+        "create child process to send failure message: %s", 42,
         getppid(), strerror(errno));
 
     /* Creation of child succeeded */
diff --git a/src/src/exim.c b/src/src/exim.c
index a6a1ea8..efda3b5 100644
--- a/src/src/exim.c
+++ b/src/src/exim.c
@@ -174,6 +174,7 @@ Returns:   nothing
 void
 set_process_info(const char *format, ...)
 {
+/*
 int len = sprintf(CS process_info, "%5d ", (int)getpid());
 va_list ap;
 va_start(ap, format);
@@ -185,6 +186,7 @@ process_info[len+1] = '\0';
 process_info_len = len + 1;
 DEBUG(D_process_info) debug_printf("set_process_info: %s", process_info);
 va_end(ap);
+*/
 }
 
 
diff --git a/src/src/exim_lock.c b/src/src/exim_lock.c
index 0682168..4d21142 100644
--- a/src/src/exim_lock.c
+++ b/src/src/exim_lock.c
@@ -305,7 +305,7 @@ if (use_lockfile)
 
   /* Presumably, this must match appendfile.c */
   sprintf(hitchname, "%s.%s.%08x.%08x", lockname, primary_hostname,
-    (unsigned int)now, (unsigned int)getpid());
+    16, 42);
 
   if (verbose)
     printf("exim_lock: lockname =  %s\n           hitchname = %s\n", lockname,
diff --git a/src/src/globals.c b/src/src/globals.c
index 79ac37f..1727f64 100644
--- a/src/src/globals.c
+++ b/src/src/globals.c
@@ -1237,7 +1237,7 @@ make use of the end of this string in order to save space. So the patching then
 wrecks this. We defeat this optimization by adding some additional characters
 onto the end of the string. */
 
-uschar *running_status         = US">>>running<<<" "\0EXTRA";
+uschar *running_status         = US"<<<testing>>>" "\0EXTRA";
 
 int     runrc                  = 0;
 
diff --git a/src/src/receive.c b/src/src/receive.c
index 7980c32..7661ae8 100644
--- a/src/src/receive.c
+++ b/src/src/receive.c
@@ -25,6 +25,8 @@ static FILE   *data_file = NULL;
 static int     data_fd = -1;
 static uschar *spool_name = US"";
 
+static int    message_id_gen = 0;
+
 enum CH_STATE {LF_SEEN, MID_LINE, CR_SEEN};
 
 
@@ -2585,9 +2587,9 @@ way. It appears in the initializing code in exim.c. The macro MESSAGE_ID_LENGTH
 must also be changed to reflect the correct string length. Then, of course,
 other programs that rely on the message id format will need updating too. */
 
-Ustrncpy(message_id, string_base62((long int)(message_id_tv.tv_sec)), 6);
+Ustrncpy(message_id, "aaaaaa", 6);
 message_id[6] = '-';
-Ustrncpy(message_id + 7, string_base62((long int)getpid()), 6);
+Ustrncpy(message_id + 7, "bbbbbb", 6);
 
 /* Deal with the case where the host number is set. The value of the number was
 checked when it was read, to ensure it isn't too big. The timing granularity is
@@ -2597,10 +2599,7 @@ the message, if necessary (we hope it won't be). */
 if (host_number_string != NULL)
   {
   id_resolution = (BASE_62 == 62)? 5000 : 10000;
-  sprintf(CS(message_id + MESSAGE_ID_LENGTH - 3), "-%2s",
-    string_base62((long int)(
-      host_number * (1000000/id_resolution) +
-        message_id_tv.tv_usec/id_resolution)) + 4);
+  sprintf(CS(message_id + MESSAGE_ID_LENGTH - 3), "-%02d", message_id_gen++);
   }
 
 /* Host number not set: final field is just the fractional time at an
@@ -2609,8 +2608,7 @@ appropriate resolution. */
 else
   {
   id_resolution = (BASE_62 == 62)? 500 : 1000;
-  sprintf(CS(message_id + MESSAGE_ID_LENGTH - 3), "-%2s",
-    string_base62((long int)(message_id_tv.tv_usec/id_resolution)) + 4);
+  sprintf(CS(message_id + MESSAGE_ID_LENGTH - 3), "-%02d", message_id_gen++);
   }
 
 /* Add the current message id onto the current process info string if
diff --git a/src/src/spool_out.c b/src/src/spool_out.c
index 652506f..ce30708 100644
--- a/src/src/spool_out.c
+++ b/src/src/spool_out.c
@@ -137,7 +137,7 @@ uschar * tname;
 uschar * fname;
 
 tname = spool_fname(US"input", message_subdir,
-		    string_sprintf("hdr.%d", (int)getpid()), US"");
+		    string_sprintf("hdr.%d", 42), US"");
 
 if ((fd = spool_open_temp(tname)) < 0)
   return spool_write_error(where, errmsg, US"open", NULL, NULL);
diff --git a/src/src/store.h b/src/src/store.h
index 7c860f1..2e0ead1 100644
--- a/src/src/store.h
+++ b/src/src/store.h
@@ -30,12 +30,18 @@ tracing information for debugging. */
 #define store_extend(addr,old,new) \
   store_extend_3(addr, old, new, __FILE__, __LINE__)
 
-#define store_free(addr)     store_free_3(addr, __FILE__, __LINE__)
-#define store_get(size)      store_get_3(size, __FILE__, __LINE__)
-#define store_get_perm(size) store_get_perm_3(size, __FILE__, __LINE__)
-#define store_malloc(size)   store_malloc_3(size, __FILE__, __LINE__)
-#define store_release(addr)  store_release_3(addr, __FILE__, __LINE__)
-#define store_reset(addr)    store_reset_3(addr, __FILE__, __LINE__)
+//#define store_free(addr)     store_free_3(addr, __FILE__, __LINE__)
+//#define store_get(size)      store_get_3(size, __FILE__, __LINE__)
+//#define store_get_perm(size) store_get_perm_3(size, __FILE__, __LINE__)
+//#define store_malloc(size)   store_malloc_3(size, __FILE__, __LINE__)
+//#define store_release(addr)  store_release_3(addr, __FILE__, __LINE__)
+//#define store_reset(addr)    store_reset_3(addr, __FILE__, __LINE__)
+#define store_free(addr) free(addr)
+#define store_get(size) malloc(size)
+#define store_get_perm(size) malloc(size)
+#define store_malloc(size) malloc(size)
+#define store_release(addr) free(addr)
+#define store_reset(addr)
 
 
 /* The real functions */
diff --git a/src/src/transport.c b/src/src/transport.c
index b8a4636..2e93cf0 100644
--- a/src/src/transport.c
+++ b/src/src/transport.c
@@ -1081,7 +1081,7 @@ if (!(dkim->dkim_private_key && dkim->dkim_domain && dkim->dkim_selector))
   return transport_write_message(out_fd, tctx, 0);
 
 dkim_spool_name = spool_fname(US"input", message_subdir, message_id,
-		    string_sprintf("-%d-K", (int)getpid()));
+		    string_sprintf("-%d-K", 42));
 
 if ((dkim_fd = Uopen(dkim_spool_name, O_RDWR|O_CREAT|O_TRUNC, SPOOL_MODE)) < 0)
   {
diff --git a/src/src/transports/appendfile.c b/src/src/transports/appendfile.c
index 9b3379b..20cd02b 100644
--- a/src/src/transports/appendfile.c
+++ b/src/src/transports/appendfile.c
@@ -1623,7 +1623,7 @@ if (!isdirectory)
     /* cf. exim_lock.c */
     lockname = string_sprintf("%s.lock", filename);
     hitchname = string_sprintf( "%s.%s.%08x.%08x", lockname, primary_hostname,
-      (unsigned int)(time(NULL)), (unsigned int)getpid());
+      16, 42);
 
     DEBUG(D_transport) debug_printf("lock name: %s\nhitch name: %s\n", lockname,
       hitchname);
@@ -2487,7 +2487,7 @@ else
     DEBUG(D_transport)
       debug_printf("delivering to new file in %s\n", path);
     filename = dataname =
-      string_sprintf("%s/temp.%d.%s", path, (int)getpid(), primary_hostname);
+      string_sprintf("%s/temp.%d.%s", path, 42, primary_hostname);
     fd = Uopen(filename, O_WRONLY|O_CREAT, mode);
     if (fd < 0 &&                                 /* failed to open, and */
         (errno != ENOENT ||                       /* either not non-exist */
@@ -2541,7 +2541,7 @@ else
 
       (void)gettimeofday(&msg_tv, NULL);
       basename = string_sprintf(TIME_T_FMT ".H%luP%lu.%s",
-       	msg_tv.tv_sec, msg_tv.tv_usec, getpid(), primary_hostname);
+       	16, 42, primary_hostname);
 
       filename = dataname = string_sprintf("tmp/%s", basename);
       newname = string_sprintf("new/%s", basename);
@@ -2603,7 +2603,7 @@ else
     FILE *env_file;
     address_item *taddr;
     mailstore_basename = string_sprintf("%s/%s-%s", path, message_id,
-      string_base62((long int)getpid()));
+      "42");
 
     DEBUG(D_transport)
       debug_printf("delivering in mailstore format in %s\n", path);
diff --git a/src/src/transports/tf_maildir.c b/src/src/transports/tf_maildir.c
index 7be7289..8754b07 100644
--- a/src/src/transports/tf_maildir.c
+++ b/src/src/transports/tf_maildir.c
@@ -555,7 +555,7 @@ else
 
   (void)gettimeofday(&tv, NULL);
   tempname = string_sprintf("%s/tmp/" TIME_T_FMT ".H%luP%lu.%s",
-    path, tv.tv_sec, tv.tv_usec, (long unsigned) getpid(), primary_hostname);
+    path, 0, 0, 42, primary_hostname);
 
   fd = Uopen(tempname, O_RDWR|O_CREAT|O_EXCL, ob->mode ? ob->mode : 0600);
   if (fd >= 0)
