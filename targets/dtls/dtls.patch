diff --git a/Makefile b/Makefile
index 564cc08..a6e599e 100644
--- a/Makefile
+++ b/Makefile
@@ -26,9 +26,9 @@ SOURCES+= dtls-log.c
 SOURCES+= aes/rijndael.c ecc/ecc.c sha2/sha2.c $(DTLS_SUPPORT)/dtls-support.c
 OBJECTS:= $(SOURCES:.c=.o)
 # CFLAGS:=-Wall -pedantic -std=c99 -g -O2 -I. -I$(DTLS_SUPPORT)
-CFLAGS:=-DLOG_LEVEL_DTLS=$(LOG_LEVEL_DTLS) -Wall -std=c99 -g -O2 -I. -I$(DTLS_SUPPORT)
+CFLAGS:=$(CFLAGS) -DLOG_LEVEL_DTLS=$(LOG_LEVEL_DTLS) -Wall -std=c99 -g -O2 -I. -I$(DTLS_SUPPORT)
+LDFLAGS:=$(LDFLAGS) $(LDLIBS)
 LIB:=libtinydtls.a
-LDFLAGS:=
 ARFLAGS:=cru
 doc:=doc
 
diff --git a/tests/Makefile b/tests/Makefile
index 1e01621..e2e833e 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -47,9 +47,9 @@ LIB:=../libtinydtls.a
 
 OBJECTS := $(patsubst %.c, %.o, $(SOURCES))
 
-CFLAGS  := $(OPT) $(COV) $(SAN) $(BITS) $(DEBUG_MODE) -DLOG_LEVEL_DTLS=$(LOG_LEVEL_DTLS) -I. -I.. -I../$(DTLS_SUPPORT)
-LDFLAGS := -L..
-LDLIBS  := -ltinydtls
+CFLAGS  := $(CFLAGS) $(OPT) $(COV) $(SAN) $(BITS) $(DEBUG_MODE) -DLOG_LEVEL_DTLS=$(LOG_LEVEL_DTLS) -I. -I.. -I../$(DTLS_SUPPORT)
+LDFLAGS := $(LDFLAGS) -L..
+LDLIBS  := $(LDLIBS) -ltinydtls
 
 all:	$(LIB) $(PROGRAMS)
 
diff --git a/tests/dtls-server.c b/tests/dtls-server.c
index ab8f316..8d76bfd 100644
--- a/tests/dtls-server.c
+++ b/tests/dtls-server.c
@@ -174,7 +174,7 @@ dtls_handle_read(struct dtls_context_t *ctx) {
     return -1;
   } else {
     dtls_debug("got %d bytes from port %d\n", len, 
-	     ntohs(session.addr.sin6.sin6_port));
+	     ntohs(session.addr.sin.sin_port));
     if (sizeof(buf) < len) {
       dtls_warn("packet was truncated (%d bytes lost)\n", (int)(len - sizeof(buf)));
     }
@@ -190,6 +190,7 @@ resolve_address(const char *server, struct sockaddr *dst) {
   struct addrinfo hints;
   static char addrstr[256];
   int error;
+  socklen_t len;
 
   memset(addrstr, 0, sizeof(addrstr));
   if (server && strlen(server) > 0)
@@ -211,10 +212,12 @@ resolve_address(const char *server, struct sockaddr *dst) {
   for (ainfo = res; ainfo != NULL; ainfo = ainfo->ai_next) {
 
     switch (ainfo->ai_family) {
+    case AF_INET:
     case AF_INET6:
-
-      memcpy(dst, ainfo->ai_addr, ainfo->ai_addrlen);
-      return ainfo->ai_addrlen;
+      len = ainfo->ai_addrlen;
+      memcpy(dst, ainfo->ai_addr, len);
+      freeaddrinfo(res);
+      return len;
     default:
       ;
     }
@@ -260,18 +263,19 @@ main(int argc, char **argv) {
   struct timeval timeout;
   int fd, opt, result;
   int on = 1;
-  struct sockaddr_in6 listen_addr;
+  struct sockaddr listen_addr;
+  struct sockaddr_in *listen_addr4 = (struct sockaddr_in *)&listen_addr;
 
-  memset(&listen_addr, 0, sizeof(struct sockaddr_in6));
+  memset(&listen_addr, 0, sizeof(struct sockaddr_in));
 
   /* fill extra field for 4.4BSD-based systems (see RFC 3493, section 3.4) */
-#if defined(SIN6_LEN) || defined(HAVE_SOCKADDR_IN6_SIN6_LEN)
-  listen_addr.sin6_len = sizeof(struct sockaddr_in6);
+#if defined(SIN_LEN) || defined(HAVE_SOCKADDR_IN_SIN_LEN)
+  listen_addr4->sin_len = sizeof(struct sockaddr_in);
 #endif
 
-  listen_addr.sin6_family = AF_INET6;
-  listen_addr.sin6_port = htons(DEFAULT_PORT);
-  listen_addr.sin6_addr = in6addr_any;
+  listen_addr4->sin_family = AF_INET;
+  listen_addr4->sin_port = htons(DEFAULT_PORT);
+  listen_addr4->sin_addr.s_addr = INADDR_ANY;
 
   while ((opt = getopt(argc, argv, "A:p:")) != -1) {
     switch (opt) {
@@ -282,7 +286,7 @@ main(int argc, char **argv) {
       }
       break;
     case 'p' :
-      listen_addr.sin6_port = htons(atoi(optarg));
+      listen_addr4->sin_port = htons(atoi(optarg));
       break;
     default:
       usage(argv[0], dtls_package_version());
@@ -291,7 +295,7 @@ main(int argc, char **argv) {
   }
 
   /* init socket and set it to non-blocking */
-  fd = socket(listen_addr.sin6_family, SOCK_DGRAM, 0);
+  fd = socket(listen_addr4->sin_family, SOCK_DGRAM, 0);
 
   if (fd < 0) {
     dtls_alert("socket: %s\n", strerror(errno));
@@ -308,14 +312,6 @@ main(int argc, char **argv) {
     goto error;
   }
 #endif
-  on = 1;
-#ifdef IPV6_RECVPKTINFO
-  if (setsockopt(fd, IPPROTO_IPV6, IPV6_RECVPKTINFO, &on, sizeof(on) ) < 0) {
-#else /* IPV6_RECVPKTINFO */
-  if (setsockopt(fd, IPPROTO_IPV6, IPV6_PKTINFO, &on, sizeof(on) ) < 0) {
-#endif /* IPV6_RECVPKTINFO */
-    dtls_alert("setsockopt IPV6_PKTINFO: %s\n", strerror(errno));
-  }
 
   if (bind(fd, (struct sockaddr *)&listen_addr, sizeof(listen_addr)) < 0) {
     dtls_alert("bind: %s\n", strerror(errno));
